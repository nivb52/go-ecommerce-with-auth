{{ define "stripe-js" }}

 <script src="https://js.stripe.com/v3/"></script>

    <script>
    let card;
    let stripe;
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");
    const pk = {{.StripePublicKey}}
    if (!pk) {
        throw new Error ('Invalid Strip PK, stripe PK is required')
    }
    stripe = Stripe(pk);

    function hidePayButton() {
        payButton.classList.add("d-none");
        processing.classList.remove("d-none");
    }

    function showPayButtons() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none");
    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg;
    }

     function hideCardError() {
        cardMessages.innerText = '';
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("d-none");
    }

    function showCardSuccess() {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful";
    }

   function val() {

        const form = document.getElementById("charge_form");

        const amountAsNumber = parseFloat(document.getElementById("amount").value)  * 100
        if (isNaN(amountAsNumber) || amountAsNumber === 0 ) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.remove("was-validated");
            showCardError("Invalid amount");
            setTimeout(hideCardError, 2000);
            return;
        }
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.remove("was-validated");
            form.reportValidity();
            showCardError("Invalid Form");
            setTimeout(hideCardError, 2000);
            return;
        }

        form.classList.add("was-validated");
        hidePayButton();
        
        const amountToCharge = String(amountAsNumber)
        const payload = {
            amount: amountToCharge,
            currency: 'USD'
        }
        postData('payment-intent', payload)
        .then(data => {  // JSON data parsed by `data.json()` call
            // https://stripe.com/docs/payments/accept-a-payment?ui=elements&client=html
            if (!data.client_secret) console.warn('data-secret is missing');
            stripe.confirmCardPayment(data.client_secret, {
                payment_method: {
                    card: card, // = elements.getElement(CardElement),
                    billing_details: {
                        name: document.getElementById("cardholder-name").value,
                    }
                }
            }).then(function(result) {
                if (result.error) {
                    // card declined, or something went wrong with the card
                    showCardError(result.error.message);
                    console.error(result.error.message)
                    showPayButtons();
                    return false;
                } else if(result.paymentIntent) {
                     console.log('result.paymentInten returned ');
                    if (result.paymentIntent.status === "succeeded") {
                        
                        // we have charged the card
                        document.getElementById("payment_method").value = result.paymentIntent?.payment_method;
                        document.getElementById("payment_intent").value = result.paymentIntent?.id;
                        document.getElementById("payment_amount").value = result.paymentIntent?.amount;
                        document.getElementById("payment_currency").value = result.paymentIntent?.currency;
                        
                        processing.classList.add("d-none");
                        showCardSuccess();
                        console.log(' SUBMITTING ... ' );
                        
                        result = undefined;
                        form.submit();
                        return true;
                    }
                }
            }).catch(err => {
                console.error(err);
                // due it may not be cardError but server error or JS code error
                throw(err);
            });
        }).catch(err  => {
            console.error(err);
            showCardError("Invalid response from payment gateway!");
            showPayButtons();
            return false;
        });
    }

    (function() {
        // create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        });
        card.mount("#card-element");

        // check for input errors
        card.addEventListener('change', function(event) {
            var displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-none');
                displayError.textContent = '';
            }
        });
    })();
    </script>

{{end}}